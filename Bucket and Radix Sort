import math


def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while j >=0 and array[j] > key:
            array[j+1] = array[j]
            j = j - 1
        array[j+1]= key
    return array

def bucketSort(array):
    buckets = []
    n = len(array)
    
    #Creating empty linked list
    for i in range(n):
        buckets.append([])
        
    #Putting elements in coresponding buckets
    for element in array:
        index = math.floor(n*element)
        buckets[index].append(element)
        
    #Sorting atomic buckets
    for bucket in buckets:
        bucket = insertionSort(bucket)
        
    #Joining every sorted bucket inside buckets
    i=0
    for bucket in buckets:
        for element in bucket:
            array[i] = element
            i += 1
            
    return array

import math

#Counting Sort
def countingSort(array, exp1): 
    
    n = len(array) 
    
    # The output array elements that will have sorted arr 
    b= [0] * (n) 
    
    # initialize count array as 0 
    count = [0] * (10) 
    
    # Storing frequency of elements
    for i in range(0, n): 
        index = (array[i]/exp1) 
        count[int((index)%10)] += 1
    
    #index range of sorted elements
    for i in range(1,10): 
        count[i] += count[i-1] 
    
    # Build the output array 
    i = n-1
    while i>=0: 
        index = (array[i]/exp1) 
        b[ count[math.floor((index)%10) ] - 1] = array[i] 
        count[int((index)%10)] -= 1
        i -= 1
    
    # Copying the output array to arr[], 
    # so that arr now contains sorted numbers 
    i = 0
    for i in range(0,len(array)): 
        array[i] = b[i] 
        
    #new sorted array
    b= [0] * (n)
    j = len(array)-1
    while j >=0:
        index = (array[j]/n) 
        b[count[ math.floor((index)%10) ] - 1] = array[j] 
        count[math.floor((index)%10)] -= 1
        j -= 1
    for i in range(len(array)):
        array[i] = b[i]

def radixSort(array):
    maxnum = max(array)
    n=1
    while maxnum/n > 0:
        countingSort(array,n)
        n = n*10
Array = [15, 13, 9, 5, 12, 8, 7, 4, 0, 6, 2, 1]

        
#Quick Sort


def exchange(A, i, j):
    tmp = A[i]
    A[i] = A[j]
    A[j] = tmp

def partition(A, p, r):
    x = A[r]
    i = p - 1

    for end in range(p, r):
        if A[end] <= x:
            i += 1
            exchange(A, i, end)

    exchange(A, i + 1, r)
    return i + 1

def _quicksort(A, p, r):
    if p >= r: return
    q = partition(A, p, r)
    _quicksort(A, p, q - 1)
    _quicksort(A, q+ 1, r)

def quicksort(A):
    _quicksort(A, 0, len(A)-1)
    return A

import time
def comparison(array, number=1000):
   startingTime = time.time()
   for i in range(number):
        radixSort(array)
   print(time.time()-startingTime)
   for i in range(number):
        quicksort(array)
   print(time.time()-startingTime)
def comparison1(array, number=1000):
   startingTime = time.time()
   for i in range(number):
        bucketSort(array)
   print(time.time()-startingTime)
   for i in range(number):
        quicksort(array)
   print(time.time()-startingTime)
Array = [15, 13, 9, 5, 12, 8, 7, 4, 0, 6, 2, 1]
Array1 = [0.897, 0.565, 0.656,0.1234, 0.665, 0.3434]
comparison(Array)
comparison1(Array1)
print(Array)
print(Array1)
